import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var GooglePlayGamesServices = /** @class */ (function (_super) {
    __extends(GooglePlayGamesServices, _super);
    function GooglePlayGamesServices() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GooglePlayGamesServices.prototype.auth = function () { return cordova(this, "auth", {}, arguments); };
    GooglePlayGamesServices.prototype.signOut = function () { return cordova(this, "signOut", {}, arguments); };
    GooglePlayGamesServices.prototype.isSignedIn = function () { return cordova(this, "isSignedIn", {}, arguments); };
    GooglePlayGamesServices.prototype.showPlayer = function () { return cordova(this, "showPlayer", {}, arguments); };
    GooglePlayGamesServices.prototype.submitScore = function (data) { return cordova(this, "submitScore", {}, arguments); };
    GooglePlayGamesServices.prototype.submitScoreNow = function (data) { return cordova(this, "submitScoreNow", {}, arguments); };
    GooglePlayGamesServices.prototype.getPlayerScore = function (data) { return cordova(this, "getPlayerScore", {}, arguments); };
    GooglePlayGamesServices.prototype.showAllLeaderboards = function () { return cordova(this, "showAllLeaderboards", {}, arguments); };
    GooglePlayGamesServices.prototype.showLeaderboard = function (data) { return cordova(this, "showLeaderboard", {}, arguments); };
    GooglePlayGamesServices.prototype.unlockAchievement = function (data) { return cordova(this, "unlockAchievement", {}, arguments); };
    GooglePlayGamesServices.prototype.unlockAchievementNow = function (data) { return cordova(this, "unlockAchievementNow", {}, arguments); };
    GooglePlayGamesServices.prototype.incrementAchievement = function (data) { return cordova(this, "incrementAchievement", {}, arguments); };
    GooglePlayGamesServices.prototype.incrementAchievementNow = function (data) { return cordova(this, "incrementAchievementNow", {}, arguments); };
    GooglePlayGamesServices.prototype.showAchievements = function () { return cordova(this, "showAchievements", {}, arguments); };
    GooglePlayGamesServices.pluginName = "GooglePlayGamesServices";
    GooglePlayGamesServices.plugin = "cordova-plugin-play-games-services";
    GooglePlayGamesServices.pluginRef = "plugins.playGamesServices";
    GooglePlayGamesServices.repo = "https://github.com/artberri/cordova-plugin-play-games-services";
    GooglePlayGamesServices.platforms = ["Android"];
    GooglePlayGamesServices.install = "ionic cordova plugin add cordova-plugin-play-games-services --variable APP_ID=\"YOUR_APP_ID";
GooglePlayGamesServices.ɵfac = function GooglePlayGamesServices_Factory(t) { return ɵGooglePlayGamesServices_BaseFactory(t || GooglePlayGamesServices); };
GooglePlayGamesServices.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GooglePlayGamesServices, factory: function (t) { return GooglePlayGamesServices.ɵfac(t); } });
var ɵGooglePlayGamesServices_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(GooglePlayGamesServices);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GooglePlayGamesServices, [{
        type: Injectable
    }], null, null); })();
    return GooglePlayGamesServices;
}(IonicNativePlugin));
export { GooglePlayGamesServices };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,