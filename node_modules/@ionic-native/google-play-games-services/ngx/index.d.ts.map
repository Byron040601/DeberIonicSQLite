{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface ScoreData {\n    /**\n     * The score to submit.\n     */\n    score: number;\n    /**\n     * The leaderboard ID from Google Play Developer console.\n     */\n    leaderboardId: string;\n}\nexport interface PlayerScoreData {\n    /**\n     * The player score.\n     */\n    playerScore: number;\n}\nexport interface LeaderboardData {\n    /**\n     * The leaderboard ID from Goole Play Developer console.\n     */\n    leaderboardId: string;\n}\nexport interface AchievementData {\n    /**\n     * The achievement ID from Google Play Developer console.\n     */\n    achievementId: string;\n}\nexport interface IncrementableAchievementData extends AchievementData {\n    /**\n     * The amount to increment the achievement by.\n     */\n    numSteps: number;\n}\nexport interface SignedInResponse {\n    /**\n     * True or false is the use is signed in.\n     */\n    isSignedIn: boolean;\n}\nexport interface Player {\n    /**\n     * The players display name.\n     */\n    displayName: string;\n    /**\n     * The ID given to the player by Play Games Services.\n     */\n    playerId: string;\n    /**\n     * The title of the player based on their gameplay activity. Not\n     * all players have this and it may change over time.\n     */\n    title: string | null;\n    /**\n     * Retrieves the URI for loading this player's icon-size profile image.\n     * Returns null if the player has no profile image.\n     */\n    iconImageUrl: string;\n    /**\n     * Retrieves the URI for loading this player's hi-res profile image. Returns\n     * null if the player has no profile image.\n     */\n    hiResIconImageUrl: string;\n}\nexport interface SubmittedScoreData {\n    /**\n     * The leaderboard ID from Goole Play Developer console.\n     */\n    leaderboardId: string;\n    /**\n     * The player ID from Goole Play Developer console.\n     */\n    playerId: string;\n    /**\n     * The score data in a display-appropriate format.\n     */\n    formattedScore: string;\n    /**\n     * Whether or not this score was the player's new best score.\n     */\n    newBest: boolean;\n    /**\n     * The raw score value of this score result.\n     */\n    rawScore: number;\n    /**\n     * The score tag associated with this result, if any.\n     */\n    scoreTag: string;\n}\n/**\n * @name Google Play Games Services\n * @description\n * A Cordova plugin that let's you interact with Google Play Games Services.\n *\n * @usage\n * ```typescript\n * import { GooglePlayGamesServices } from '@ionic-native/google-play-games-services/ngx';\n *\n *\n * constructor(private googlePlayGamesServices: GooglePlayGamesServices) { }\n *\n * ...\n *\n * // Authenticate with Play Games Services\n * this.googlePlayGamesServices.auth()\n *     .then(() => console.log('Logged in to Play Games Services'))\n *     .catch(e) => console.log('Error logging in Play Games Services', e);\n *\n * // Sign out of Play Games Services.\n * this.googlePlayGamesServices.signOut()\n *     .then(() => console.log('Logged out of Play Games Services'))\n *     .catch(e => console.log('Error logging out of Play Games Services', e);\n *\n * // Check auth status.\n * this.googlePlayGamesServices.isSignedIn()\n *     .then((signedIn: SignedInResponse) => {\n *         if (signedIn.isSignedIn) {\n *             hideLoginButton();\n *         }\n *     });\n *\n * // Fetch currently authenticated user's data.\n * this.googlePlayGamesServices.showPlayer().then((data: Player) => {\n *    console.log('Player data', data);\n * });\n *\n * // Submit a score.\n * this.googlePlayGamesServices.submitScore({\n *     score: 100,\n *     leaderboardId: 'SomeLeaderboardId'\n * });\n *\n * // Submit a score and wait for reponse.\n * this.googlePlayGamesServices.submitScoreNow({\n *     score: 100,\n *     leaderboardId: 'SomeLeaderboardId'\n * }).then((data: SubmittedScoreData) => {\n *    console.log('Score related data', data);\n * });\n *\n * // Get the player score on a leaderboard.\n * this.googlePlayGamesServices.getPlayerScore({\n *     leaderboardId: 'SomeLeaderBoardId'\n * }).then((data: PlayerScoreData) => {\n *     console.log('Player score', data);\n * });\n *\n * // Show the native leaderboards window.\n * this.googlePlayGamesServices.showAllLeaderboards()\n *     .then(() => console.log('The leaderboard window is visible.'));\n *\n * // Show a signle native leaderboard window.\n * this.googlePlayGamesServices.showLeaderboard({\n *     leaderboardId: 'SomeLeaderBoardId'\n * }).then(() => console.log('The leaderboard window is visible.'));\n *\n * // Unlock an achievement.\n * this.googlePlayGamesServices.unlockAchievement({\n *     achievementId: 'SomeAchievementId'\n * }).then(() => console.log('Achievement sent'));\n *\n * // Unlock an achievement and wait for response.\n * this.googlePlayGamesServices.unlockAchievementNow({\n *     achievementId: 'SomeAchievementId'\n * }).then(() => console.log('Achievement unlocked'));\n *\n * // Incremement an achievement.\n * this.googlePlayGamesServices.incrementAchievement({\n *     step: 1,\n *     achievementId: 'SomeAchievementId'\n * }).then(() => console.log('Achievement increment sent'));\n *\n * // Incremement an achievement and wait for response.\n * this.googlePlayGamesServices.incrementAchievementNow({\n *     step: 1,\n *     achievementId: 'SomeAchievementId'\n * }).then(() => console.log('Achievement incremented'));\n *\n * // Show the native achievements window.\n * this.googlePlayGamesServices.showAchivements()\n *    .then(() => console.log('The achievements window is visible.'));\n *\n * ```\n */\nexport declare class GooglePlayGamesServices extends IonicNativePlugin {\n    /**\n     * Initialise native Play Games Service login procedure.\n     *\n     * @return {Promise<any>} Returns a promise that resolves when the player\n     * is authenticated with Play Games Services.\n     */\n    auth(): Promise<any>;\n    /**\n     * Sign out of Google Play Games Services.\n     *\n     * @return {Promise<any>} Returns a promise that resolve when the player\n     * successfully signs out.\n     */\n    signOut(): Promise<any>;\n    /**\n     * Check if the user is signed in.\n     *\n     * @return {Promise<SignedInResponse>} Returns a promise that resolves with\n     * the signed in response.\n     */\n    isSignedIn(): Promise<SignedInResponse>;\n    /**\n     * Show the currently authenticated player.\n     *\n     * @return {Promise<Player>} Returns a promise that resolves when Play\n     * Games Services returns the authenticated player.\n     */\n    showPlayer(): Promise<Player>;\n    /**\n     * Submit a score to a leaderboard. You should ensure that you have a\n     * successful return from auth() before submitting a score.\n     *\n     * @param data {ScoreData} The score data you want to submit.\n     * @return {Promise<any>} Returns a promise that resolves when the\n     * score is submitted.\n     */\n    submitScore(data: ScoreData): Promise<string>;\n    /**\n     * Submit a score to a leaderboard and waits for the response from\n     * Google Play Games. You should ensure that you have a\n     * successful return from auth() before submitting a score.\n     *\n     * @param data {ScoreData} The score data you want to submit.\n     * @return {Promise<SubmittedScoreData>} Returns a promise that resolves when Play\n     * Games Services returns the score information.\n     */\n    submitScoreNow(data: ScoreData): Promise<SubmittedScoreData>;\n    /**\n     * Get the player score on a leaderboard. You should ensure that you have a\n     * successful return from auth() before requesting a score.\n     *\n     * @param data {LeaderboardData} The leaderboard score you want to request.\n     * @return {Promise<PlayerScoreData>} Returns a promise that resolves when Play\n     * Games Services returns the player score.\n     */\n    getPlayerScore(data: LeaderboardData): Promise<PlayerScoreData>;\n    /**\n     * Launches the native Play Games leaderboard view controller to show all the\n     * leaderboards.\n     *\n     * @return {Promise<any>} Returns a promise that resolves when the native\n     * leaderboards window opens.\n     */\n    showAllLeaderboards(): Promise<any>;\n    /**\n     * Launches the native Play Games leaderboard view controll to show the\n     * specified leaderboard.\n     *\n     * @param data {LeaderboardData} The leaderboard you want to show.\n     * @return {Promise<any>} Returns a promise that resolves when the native\n     * leaderboard window opens.\n     */\n    showLeaderboard(data: LeaderboardData): Promise<any>;\n    /**\n     * Unlock an achievement.\n     *\n     * @param data {AchievementData}\n     * @return {Promise<any>} Returns a promise that resolves when the\n     * achievement is sent.\n     */\n    unlockAchievement(data: AchievementData): Promise<string>;\n    /**\n     * Unlock an achievement and wait for response.\n     *\n     * @param data {AchievementData}\n     * @return {Promise<any>} Returns a promise that resolves when the Play\n     * Games Services returns that the achievement is unlocked.\n     */\n    unlockAchievementNow(data: AchievementData): Promise<string>;\n    /**\n     * Increment an achievement.\n     *\n     * @param data {IncrementableAchievementData}\n     * @return {Promise<any>} Returns a promise that resolves when the\n     * achievement is sent.\n     */\n    incrementAchievement(data: IncrementableAchievementData): Promise<string>;\n    /**\n     * Increment an achievement and wait for response.\n     *\n     * @param data {IncrementableAchievementData}\n     * @return {Promise<any>} Returns a promise that resolves when the Play\n     * Games Services returns that the achievement has been incremented.\n     */\n    incrementAchievementNow(data: IncrementableAchievementData): Promise<string>;\n    /**\n     * Lauches the native Play Games achievements view controller to show\n     * achievements.\n     *\n     * @return {Promise<any>} Returns a promise that resolves when the\n     * achievement window opens.\n     */\n    showAchievements(): Promise<any>;\n}\n"]}